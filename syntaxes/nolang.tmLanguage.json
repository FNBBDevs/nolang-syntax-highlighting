{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "scopeName": "source.nolang",
  "fileTypes": [".nl", ".nolang", ".Nolang", ".nolan", ".gregory", ".Nolan", ".Gregory"],
  "name": "Nolang Programming Language",
  "patterns": [
    {
      "include": "#base"
    }
  ],

  "repository": {
    "base": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#operation"
        },
        {
          "include": "#control"
        },
        {
          "include": "#dec"
        },
        {
          "include": "#bool"
        },
        {
          "include": "#number"
        },
        {
          "include": "#keyword-function"
        },
        {
          "include": "#identifier"
        },
        {
          "include": "#paren-expression"
        },
        {
          "include": "#strings"
        }
      ]
    },
    
    "keywords": {
      "patterns": [
        { 
          "match": "\\b(if|erm|hermph|for|while|and|or|not|greg)\\b", 
          "name": "keyword.control" 
        }
      ]
    },

    "operation": {
      "patterns": [
        {
          "match": "(\\-|\\+|/|\\*|=)",
          "name": "keyword.operator"
        }
      ]
    },

    "comments": {
      "patterns": [
        { 
          "match": "#.*$", 
          "name": "comment.line.number-sign" 
          }
        ]
    },

    "number": {
      "patterns": [
        { 
          "match": "\\b-?[0-9]+(\\.[0-9]+)?\\b", 
          "name": "constant.numeric" 
        }
      ]
    },

    "bool": {
      "patterns": [
        {
          "match": "\\b(True|False|nol)\\b",
          "name": "constant.language"
        }
      ]
    },

    "dec": {
      "patterns": [
        { 
          "match": "\\b(no)\\b", 
          "name": "storage.type" 
          }
        ]
    },

    "keyword-function": {
      "patterns": [{ "match": "(nolin|nolout|time)", "name": "support.function" }]
    },

    "strings": {
      "patterns": [
        { 
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end"
            }
          },
          "name": "string.quoted.single",
          "patterns": [
            {
              "include": "#escape"
            }
          ]
        },
        { 
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end"
            }
          },
          "name": "string.quoted.double",
          "patterns": [
            {
              "include": "#escape"
            }
          ]
        }
      ]
    },

    "escape": {
      "patterns": [
        { 
          "match": "(?x)\\\\ (\n\\\\             |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}     |\n[4-7]\\d?        |\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )", 
          "name": "constant.character.escape" 
        }
      ]
    },

    "identifier": {
      "patterns": [
        {
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "name": "variable"
        }
      ]
    },

    "paren-expression": {
      "begin": "\\(",
      "end": "\\)",
      "patterns": [
        { 
          "include": "#strings" 
        },
        { 
          "include": "#paren-expression" 
        },
        { 
          "include": "#base" 
        }
      ]
    }
  }
}